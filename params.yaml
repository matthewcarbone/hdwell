# Parameter file: read by run.py
#     This is the main parameter file for executing the hdwell source code. In
#     general, parameters here can be overridden by command line flags. Note
#     that this parameter file should always be in the working directory:
#     ~/.../hdwell, else it will not be located.
# 
# Matthew R. Carbone & Marco Baity-Jesi
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Protocol --------------------------------------------------------------------
#     Determines the kind of run we will be doing. Default to pure monte carlo
#     sampling on the unit ball. The protocols are as follows:
#         protocol : int
#             1 - Sample on the unit ball in a purely random fashion: Meropolis
#                 selection criteria.
#             2 - Sample on the unit ball using a Markov chain random walk,
#                 also with a Metropolis selection criteria.
#         directory_override : str
#             Directory to which a data file should be created and all data
#             saved. Special option is 'wd', which stands for working
#             directory. Otherwise, specify the absolute path.
#         one_run : bool
#             If true, will exit after the first permutation, useful for
#             debugging.

protocol: 2
directory_override: 'wd'
one_run: False

# Execution Parameters --------------------------------------------------------
#     All permutations of parameters listed will be executed independently. The
#     parameters represent the following system properties:
#         beta : list of floats
#             Inverse temperature (1/T).
#         dims : list of integers
#             Dimensionality of the system.
#         nmc : list of integers
#             The number of monte carlo time steps will be equal to 10^nmc[i],
#             where `i` is some entry in the list. Note that the runtime will
#             scale like Theta(10^nmc).
#         nvec : list of integers
#             Number of independent "particles" in the "ensemble". Observables
#             will be averaged over this axis.
#         nvec_multiplier : int
#             Using list comprenension, changes nvec -> nvec * nvec_multiplier
#         lmbdp : float
#             Value of lambda prime (lmbdp = lambda*N).
#         ptype : str
#             Type of potential we're considering. Current choices are listed
#             in aux.py.
#         save_stat : bool
#             Whether or not to save statistical information (e.g. save much
#             more data for statistical analysis across `nvec_multiplier`
#             runs).
#         xp_param : float
#             Only used in random walk sampling: this scales the radius of the
#             next-selected point via an exponential distribution.

execution_parameters:
  beta:  [1.3, 1.5, 1.6]
  dims:  [10]
  nmc:   [6]
  nvec:  [10000]

nvec_multiplier: 20

lmbdp:         1.0
ptype:         'log'
save_stat:     True
xp_param:      30.0



# Reporting and Sampling ------------------------------------------------------
#     The average energy, psi_basin, psi_configuration and memory are always
#     going to be reported.
#         n_report : int
#             Total number of reports per job piped to output.
#         smart_sampling : bool
#             If set to True, utilizes the sampling algorithm on the unit
#             n-ball. If False, will sample randomly in an n-dimensional space
#             and retain only points that fall within the unit n-ball. That is
#             very slow, since in the n -> inf limit all points fall on the
#             surface.

n_report:          200
smart_sampling :   True  # Keep as True, not yet implemented


# Danger zone -----------------------------------------------------------------
#     If set to False, anything here can be considered as "safe." Otherwise,
#     they may have adverse affect on system performance or worse, memory and
#     storage. Please know what you're doing if changing any of these to True,
#     as some unwanted consequences could be including but not limited to
#     saving multiple TB of configurations to disk.
#         save_all_energies : bool
#             As the name implies, if set to True, all configurations
#             (which means the nmc x nvec-dimensional matrix) will be saved to
#             disk as a pickle file. Warnings will be prompted to the user
#             before execution with this set to True, as the amount of storage
#             this could take up can get out of hand very quickly.
#         run_on_local : bool
#             Will attempt to submit the jobs to your local machine. Not so
#             much dangerous as perhaps time consuming. Although given the
#             length of some of these jobs, your CPU might overhead and
#             explode. Use at your own risk!
#         pipe_all_to_LOG : bool
#             Pipes all the output of the submission script to the log file.

danger:
  save_all_energies:  False
  run_on_local:       False
  pipe_all_to_LOG:    False  # Not yet implemented


# Plotting --------------------------------------------------------------------
#     Controls the protocol for automatic plotting using the plotting_tool()
#     function in aux.py. See templates.py for a detailed description of what
#     each protocol corresponds to.

plot:
  protocol:        1
  dpi:             400
  plots_per_page:  5
